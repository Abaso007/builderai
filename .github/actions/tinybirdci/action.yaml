
name: Tinybird CI

inputs:
  data_project_dir:
    description: "relative path of the folder containing the data project"
    required: false
    type: string
    default: .
  tb_format:
    description: "true to force formatting of Datafiles"
    required: false
    type: boolean
    default: false
  git_depth:
    description: "Number of commits to fetch. 0 indicates all history for all branches and tags"
    required: false
    type: number
    default: 0
  use_last_partition:
    description: "true to include --last-partition flag when creating branches"
    required: false
    type: boolean
    default: true
  tb_env:
    description: "a global environment variable to replace inside the jobs and run conditional workflows (e.g. staging/production deployments)"
    required: false
    type: string
  tb_admin_token:
    required: true
  tb_host:
    required: true
  token_name:
    required: true

outputs:
  branch_name:
    value: ${{ steps.create-branch-tb.outputs.branch_name }}
  tb_branch_token:
    value: ${{ steps.get-env-token.outputs.tb_branch_token }}

runs:
  using: "composite"

  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: ${{ inputs.git_depth }}
        ref: ${{ github.event.pull_request.head.sha }}

    - uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        architecture: "x64"
        cache: 'pip'

    - name: Validate input
      shell: bash
      run: |
        [[ "${{ inputs.tb_admin_token }}" ]] || { echo "Go to the tokens section in your Workspace, copy the 'admin token' and set TB_ADMIN_TOKEN as a Secret in your Git repository"; exit 1; }

    - name: Set environment variables
      shell: bash
      working-directory: ${{ inputs.data_project_dir }}
      run: |
        GIT_BRANCH=${GITHUB_HEAD_REF}
        [[ -z "${_ENV_FLAGS}" ]] && _ENV_FLAGS="${{ inputs.use_last_partition && '--last-partition ' || '' }}--wait"
        _NORMALIZED_BRANCH_NAME=$(echo $GIT_BRANCH | rev | cut -d "/" -f 1 | rev | tr '.-' '_')

        echo "GIT_BRANCH=$GIT_BRANCH" >> $GITHUB_ENV
        echo "_ENV_FLAGS=$_ENV_FLAGS" >> $GITHUB_ENV
        echo "_NORMALIZED_BRANCH_NAME=$_NORMALIZED_BRANCH_NAME" >> $GITHUB_ENV
        echo "TB_ENV=${{ inputs.tb_env }}" >> $GITHUB_ENV
        grep -v '^#' .tinyenv >> $GITHUB_ENV
        echo >> $GITHUB_ENV # Ensures new line at the end of the file
        BRANCH_NAME="ci_${_NORMALIZED_BRANCH_NAME}"
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV


    - name: Install Tinybird CLI
      shell: bash
      working-directory: ${{ inputs.data_project_dir }}
      run: |
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        else
          pip install tinybird-cli
        fi

    - name: Get changed files
      id: files
      uses: tj-actions/changed-files@v42
      with:
        files: |
          **/*.{datasource,incl,pipe}

    - name: Check formatting
      if: ${{ inputs.tb_format && steps.files.outputs.any_changed == 'true' }}
      shell: bash
      run: |
        for file in ${{ steps.files.outputs.all_changed_files }}; do
          tb fmt --diff "$file"
        done

    - name: Tinybird version
      shell: bash
      working-directory: ${{ inputs.data_project_dir }}
      run: tb --version

    - name: Check all the data files syntax
      shell: bash
      working-directory: ${{ inputs.data_project_dir }}
      run: tb check

    - name: Check auth
      shell: bash
      working-directory: ${{ inputs.data_project_dir }}
      run: tb --host ${{ inputs.tb_host }} --token ${{ inputs.tb_admin_token }} auth info

    - name: Try delete previous Branch
      shell: bash
      working-directory: ${{ inputs.data_project_dir }}
      run: |
        output=$(tb --host ${{ inputs.tb_host }} --token ${{ inputs.tb_admin_token }} branch ls)

        # Check if the branch name exists in the output
        if echo "$output" | grep -q "\b$BRANCH_NAME\b"; then
            tb \
              --host ${{ inputs.tb_host }} \
              --token ${{ inputs.tb_admin_token }} \
              branch rm $BRANCH_NAME \
              --yes
        else
            echo "Skipping clean up: The Branch '$BRANCH_NAME' does not exist."
        fi

    - name: Create new test Branch
      id: create-branch-tb
      shell: bash
      working-directory: ${{ inputs.data_project_dir }}
      run: |
        echo "Creating branch"
        echo "Branch name: $BRANCH_NAME"

        tb \
        --host ${{ inputs.tb_host }} \
        --token ${{ inputs.tb_admin_token }} \
        branch create $BRANCH_NAME \
        ${_ENV_FLAGS}

        echo "Branch created: $BRANCH_NAME"
        # add it to the output
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

    - name: Use Branch
      shell: bash
      working-directory: ${{ inputs.data_project_dir }}
      run: |
        tb --host ${{ inputs.tb_host }} --token ${{ inputs.tb_admin_token }} branch use $BRANCH_NAME

    - name: Get env token for the branch
      id: get-env-token
      shell: bash
      working-directory: ${{ inputs.data_project_dir }}
      run: |
        TB_TOKEN_ID=$(tb token ls | awk '/^id: /{id=$2} /^name: /{print id " - " $2}' | grep ${{ inputs.token_name }} | head -n 1 | cut -d' ' -f1)

        if [ -z "$TB_TOKEN_ID" ]; then
          echo "Token ${{ inputs.token_name }} not found, make sure it exists in the main workspace"
          exit 1
        fi

        echo "Getting branch token..."
        # I don't know who decided to use pyperclip, but it's not available on the runners

        TOKEN=$(curl -X GET \
            -H "Authorization: Bearer ${{ inputs.tb_admin_token }}" \
            "${{ inputs.tb_host }}/v0/tokens/$TB_TOKEN_ID" | jq .token)

        # Mask the token
        echo "::add-mask::$TOKEN"
        echo "tb_branch_token=$TOKEN" >> $GITHUB_OUTPUT

    # - name: Deploy changes to the test Branch
    #   shell: bash
    #   working-directory: ${{ inputs.data_project_dir }}
    #   run: |
    #     source .tinyenv
    #     DEPLOY_FILE=./deploy/${VERSION}/deploy.sh
    #     if [ ! -f "$DEPLOY_FILE" ]; then
    #       echo "$DEPLOY_FILE not found, running default tb deploy command"
    #       tb deploy ${CI_FLAGS}
    #       tb release ls
    #     fi

    # - name: Custom deployment to the test Branch
    #   shell: bash
    #   working-directory: ${{ inputs.data_project_dir }}
    #   run: |
    #     source .tinyenv
    #     DEPLOY_FILE=./deploy/${VERSION}/deploy.sh
    #     if [ -f "$DEPLOY_FILE" ]; then
    #       echo "$DEPLOY_FILE found"
    #       if ! [ -x "$DEPLOY_FILE" ]; then
    #         echo "Error: You do not have permission to execute '$DEPLOY_FILE'. Run:"
    #         echo "> chmod +x $DEPLOY_FILE"
    #         echo "and commit your changes"
    #         exit 1
    #       else
    #         $DEPLOY_FILE
    #       fi
    #     fi

    # - name: Post deploy
    #   shell: bash
    #   working-directory: ${{ inputs.data_project_dir }}
    #   run: |
    #     POSTDEPLOY_FILE=./deploy/${VERSION}/postdeploy.sh
    #     if [ -f "$POSTDEPLOY_FILE" ]; then
    #       if ! [ -x "$POSTDEPLOY_FILE" ]; then
    #         echo "Error: You do not have permission to execute '$POSTDEPLOY_FILE'. Run:"
    #         echo "> chmod +x $POSTDEPLOY_FILE"
    #         echo "and commit your changes"
    #         exit 1
    #       else
    #         $POSTDEPLOY_FILE
    #       fi
    #     fi

    # - name: Get regression labels
    #   id: regression_labels
    #   uses: alrocar/get-labels-action@v1.0.1
    #   with:
    #     github_token: ${{ inputs.GITHUB_TOKEN }}
    #     label_key: regression

    # - name: Run pipe regression tests
    #   shell: bash
    #   working-directory: ${{ inputs.data_project_dir }}
    #   run: |
    #     source .tinyenv
    #     echo ${{ steps.regression_labels.outputs.labels }}
    #     REGRESSION_LABELS=$(echo "${{ steps.regression_labels.outputs.labels }}" | awk -F, '{for (i=1; i<=NF; i++) if ($i ~ /^--/) print $i}' ORS=',' | sed 's/,$//')
    #     echo "Regression labels: ${REGRESSION_LABELS}"

    #     CONFIG_FILE=./tests/regression.yaml
    #     BASE_CMD="tb branch regression-tests"
    #     LABELS_CMD="$(echo ${REGRESSION_LABELS} | tr , ' ')"
    #     if [ -f ${CONFIG_FILE} ]; then
    #         echo "Config file '${CONFIG_FILE}' found, adding pull request labels as options"
    #         ${BASE_CMD} -f ${CONFIG_FILE} --wait ${LABELS_CMD}
    #     else
    #         echo "Config file not found at '${CONFIG_FILE}', running with default values"
    #         ${BASE_CMD} coverage --wait ${LABELS_CMD}
    #     fi

    # - name: Append fixtures
    #   shell: bash
    #   working-directory: ${{ inputs.data_project_dir }}
    #   run: |
    #     if [ -f ./scripts/append_fixtures.sh ]; then
    #       echo "append_fixtures script found"
    #       ./scripts/append_fixtures.sh
    #     fi

    # - name: Run fixture tests
    #   shell: bash
    #   working-directory: ${{ inputs.data_project_dir }}
    #   run: |
    #     if [ -f ./scripts/exec_test.sh ]; then
    #       ./scripts/exec_test.sh
    #     fi

    # - name: Run data quality tests
    #   shell: bash
    #   working-directory: ${{ inputs.data_project_dir }}
    #   run: |
    #     tb test run -v -c 4
