#!/usr/bin/env bash

# Please Use Google Shell Style: https://google.github.io/styleguide/shell.xml

# ---- Start unofficial bash strict mode boilerplate
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -o errexit  # always exit on error
set -o errtrace # trap errors in functions as well
set -o pipefail # don't ignore exit codes when piping output
set -o posix    # more strict failures in subshells
# set -x          # enable debugging


cd "$(dirname "${BASH_SOURCE[0]}")/.."

echo "Starting up"

# lets check first that docker, tb cli and node are installed
if ! command -v docker &> /dev/null; then
  echo "Docker could not be found"
  exit 1
fi

if ! command -v docker-compose &> /dev/null; then
  echo "Docker Compose could not be found"
  exit 1
fi

if ! command -v tb &> /dev/null; then
  echo "Tinybird CLI could not be found"
  exit 1
fi

if ! command -v node &> /dev/null; then
  echo "Node could not be found"
  exit 1
fi

# start the docker compose services
docker-compose up -d

# use the correct node version
bash -ic 'nvm use'

# CURRENT_GIT_BRANCH=$(git branch --show-current)

# TODO: add tmux to start the services in different panes

# take the first parameter as the mode id if not provided, use dev
MODE_ID=${1:-dev}

if [ "$MODE_ID" = "dev" ]; then
  # banner to show the user that we are using the preview environment
  echo ""
  echo "########################################################"
  echo "# Using development environment"
  echo "########################################################"
  echo ""

  # override tinybird host
  TB_HOST="http://localhost:7181"
  REDIS_URL="http://localhost:8079"
  REDIS_TOKEN="example_token"

  # loging to tb
  cd internal/tinybird

  # start the tinybird local server
  tb local start

  # check if tinybird http://localhost:7181 is running
  echo "Waiting for Tinybird to be ready..."
  max_attempts=12  # 2 minutes total
  attempt=1

  while ! curl -s http://localhost:7181 > /dev/null 2>&1; do
    if [ $attempt -ge $max_attempts ]; then
      echo "Tinybird failed to start after 2 minutes"
      exit 1
    fi
    echo "Attempt $attempt of $max_attempts: Tinybird not ready, waiting 10 seconds..."
    sleep 10
    ((attempt++))
  done


  # We need to override on development some variables so we can work with local first tools.
  TB_TOKEN=$(curl -s http://localhost:7181/tokens | jq -r ".workspace_admin_token")

  # auth tb with the admin token
  tb auth --token $TB_TOKEN --host $TB_HOST

  # build the project
  tb build

  cd ../../

  infisical run --env=preview --path=/ --recursive -- env TINYBIRD_TOKEN="$TB_TOKEN" TINYBIRD_URL="$TB_HOST" UPSTASH_REDIS_REST_URL="$REDIS_URL" UPSTASH_REDIS_REST_TOKEN="$REDIS_TOKEN" pnpm run dev
elif [ "$MODE_ID" = "preview" ]; then
  # banner to show the user that we are using the preview environment
  # TODO: Preview should use the preview database as well
  echo ""
  echo "########################################################"
  echo "# Using preview environment"
  echo "########################################################"
  echo ""

  TB_HOST=$(infisical secrets get TINYBIRD_URL --env=preview --path=/app --raw-value)
  # get the admin token from infisical
  TB_ADMIN_TOKEN=$(infisical secrets get TB_ADMIN_TOKEN --env=preview --path=/ci --raw-value)

  #NORMALIZED_BRANCH_NAME=$(echo $CURRENT_GIT_BRANCH | rev | cut -d "/" -f 1 | rev | tr '.-' '_')
  #TB_BRANCH_NAME="ci_${NORMALIZED_BRANCH_NAME}"

  # activate the tinybird cli
  cd internal/tinybird
  #source .venv/bin/activate

  # auth tb with the admin token
  tb auth --token $TB_ADMIN_TOKEN --host $TB_HOST

  # get the branch name from the current git branch
  #OUTPUT=$(tb branch ls)

  # echo "OUTPUT: $OUTPUT"

  # create the branch if it does not exist
  # if echo "$OUTPUT" | grep -q "\b$TB_BRANCH_NAME\b"; then
  #   echo "Skipping branch creation for tinybird '$TB_BRANCH_NAME' because it already exists."
  # else
  #   echo "Creating branch '$TB_BRANCH_NAME' for tinybird because it does not exist."

  #   tb branch create --last-partition --wait $TB_BRANCH_NAME
  # fi

  # use the branch
  #tb branch use $TB_BRANCH_NAME


  #TB_TOKEN_ID=$(tb token ls | awk '/^id: /{id=$2} /^name: /{print id " - " $2}' | grep web-apps | head -n 1 | cut -d' ' -f1)

  # if [ -z "$TB_TOKEN_ID" ]; then
  #   echo "Token not found for tinybird, make sure it exists in the main workspace"
  #   exit 1
  # fi

  # check if there is a deployment in staging
  # TINYBIRD_DEPLOYMENT_ID=$(tb --cloud deployment ls | grep "False" | cut -d' ' -f3)

  # # if not deployment is found, create a new one
  # if [ -z "$TINYBIRD_DEPLOYMENT_ID" ]; then
  #   echo "No deployment found in staging, creating a new one"
  #   tb --cloud deployment create --wait
  #   TINYBIRD_DEPLOYMENT_ID=$(tb --cloud deployment ls | grep "False" | cut -d' ' -f3)
  # fi

  # echo "Using deployment $TINYBIRD_DEPLOYMENT_ID"

  # # get all endpoints
  # ENDPOINTS=$(tb --cloud endpoint ls | awk '/^id: /{id=$2} /^name: /{print id " - " $2}' | cut -d' ' -f3)

  # # add the token to the endpoints
  # echo "$ENDPOINTS" | while read -r ENDPOINT; do
  #   if [ -n "$ENDPOINT" ]; then
  #     echo "Adding token to endpoint $ENDPOINT"
  #     tb --cloud token create static web-apps --scope DATASOURCES:READ --resource "$ENDPOINT"
  #   fi
  # done

  # # copy the token to the clipboard
  # tb --cloud token copy web-apps

  # # get the token from the clipboard
  # if [[ "$OSTYPE" == "linux-gnu"* ]]; then
  #   if command -v xclip &>/dev/null; then
  #     TB_TOKEN=$(xclip -o -selection clipboard)
  #   else
  #     TB_TOKEN=$(xsel --clipboard --output)
  #   fi
  # elif [[ "$OSTYPE" == "darwin"* ]]; then
  #   TB_TOKEN=$(pbpaste)
  # elif [[ "$OSTYPE" == "msys"* || "$OSTYPE" == "cygwin"* || "$OSTYPE" == "win32" ]]; then
  #   TB_TOKEN=$(powershell.exe Get-Clipboard)
  # else
  #   echo "Unsupported OS. Please manually paste the token."
  #   exit 1
  # fi

  # auth tb with the normal token
  # tb auth --token $TB_TOKEN --host $TB_HOST

  cd ../../

  # override the token in the env
  infisical run --env=preview --path=/ --recursive -- env TINYBIRD_TOKEN="$TB_ADMIN_TOKEN" TINYBIRD_URL="$TB_HOST" pnpm run dev
else
  echo "Invalid mode: $MODE_ID"
  exit 1
fi
