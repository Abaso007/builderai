VERSION 1

NODE features_usage
DESCRIPTION >
    Get features usage with custom period filtering.
    Parameters:
    - start: Unix timestamp in milliseconds for period start (required)
    - end: Unix timestamp in milliseconds for period end (required)
    - customerId: Customer ID to filter results (required)
    - featureSlug: Feature slug to filter results (required)
    - projectId: Project ID to filter results (required)

SQL >
    %
    WITH
        {{ Int64(start, 0, description="Start timestamp in milliseconds", required=True) }} AS start_ts,
        {{ Int64(end, 0, description="End timestamp in milliseconds", required=True) }} AS end_ts
    SELECT
        {{ String(customerId, description="Customer ID to filter results", required=True) }}
        AS customerId,
        {{ String(featureSlug, description="Feature slug to filter results", required=True) }}
        AS featureSlug,
        {{ String(projectId, description="Project ID to filter results", required=True) }} AS projectId,
        -- Current period metrics
        finalizeAggregation(
            sumState(
                CASE
                    WHEN
                        timestamp >= fromUnixTimestamp64Milli(start_ts)
                        AND timestamp <= fromUnixTimestamp64Milli(end_ts)
                    THEN usage
                END
            )
        ) AS sum,
        -- All time sum
        finalizeAggregation(sumState(usage)) AS sum_all,
        -- Last value during period
        finalizeAggregation(
            argMaxState(
                CASE
                    WHEN
                        timestamp >= fromUnixTimestamp64Milli(start_ts)
                        AND timestamp <= fromUnixTimestamp64Milli(end_ts)
                    THEN usage
                END,
                CASE
                    WHEN
                        timestamp >= fromUnixTimestamp64Milli(start_ts)
                        AND timestamp <= fromUnixTimestamp64Milli(end_ts)
                    THEN timestamp
                END
            )
        ) AS last_during_period,
        -- Count during period
        finalizeAggregation(
            countState(
                CASE
                    WHEN
                        timestamp >= fromUnixTimestamp64Milli(start_ts)
                        AND timestamp <= fromUnixTimestamp64Milli(end_ts)
                    THEN usage
                END
            )
        ) AS count,
        -- Count all time
        finalizeAggregation(countState(usage)) AS count_all,
        -- Max during period
        finalizeAggregation(
            maxState(
                CASE
                    WHEN
                        timestamp >= fromUnixTimestamp64Milli(start_ts)
                        AND timestamp <= fromUnixTimestamp64Milli(end_ts)
                    THEN usage
                END
            )
        ) AS max,
        -- Max all time
        finalizeAggregation(maxState(usage)) AS max_all
    FROM features_usage__v2
    WHERE
        customerId = {{ String(customerId) }}
        AND featureSlug = {{ String(featureSlug) }}
        AND projectId = {{ String(projectId) }}
    GROUP BY customerId, featureSlug, projectId
    ORDER BY customerId, featureSlug, projectId
