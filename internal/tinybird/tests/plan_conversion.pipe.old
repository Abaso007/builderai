DESCRIPTION >
    Plan conversion metrics including views, clicks, and signups.
    Tracks the complete conversion funnel for plan versions.
    Accepts optional filtering by date range, plan_version_id, and plan_slug.

TOKEN "web-apps" READ

NODE plan_views
DESCRIPTION >
    Extract plan views from page_hit events.
    Parse plan_ids array and create individual records for each plan shown.

SQL >
    %
    SELECT
        toDate(timestamp) AS date,
        coalesce(session_id, '0') as session_id,
        JSONExtractString(payload, 'plan_ids') as plan_ids,
        1 as views
    FROM analytics_hits
    WHERE 1 = 1
        {% if defined(intervalDays) %}
            AND date >= timestampAdd(today(), interval -{{ Int(intervalDays) }} day)
        {% else %} AND date >= timestampAdd(today(), interval -30 day)
        {% end %}
        {% if defined(plan_version_id) %}
            AND has(JSONExtractArrayRaw(payload, 'plan_ids'), concat('"', {{ String(plan_version_id) }}, '"'))
        {% end %}

NODE plan_clicks
DESCRIPTION >
    Extract plan clicks from existing materialized view

SQL >
    %
    SELECT
        date,
        plan_version_id,
        plan_slug,x
        plan_version,
        sumMerge(total_clicks) as total_clicks,
        sumMerge(unique_clicks) as unique_clicks
    FROM analytics_plans_mv
    WHERE
        1 = 1
        {% if defined(plan_version_id) %} AND plan_version_id = {{ String(plan_version_id) }} {% end %}
        {% if defined(plan_slug) %} AND plan_slug = {{ String(plan_slug) }} {% end %}
        {% if defined(plan_version) %} AND plan_version = {{ String(plan_version) }} {% end %}
        {% if defined(date_from) %}
            AND date >= {{ Date(date_from, description="Starting day for filtering a date range", required=False) }}
        {% else %} AND date >= timestampAdd(today(), interval -30 day)
        {% end %}
        {% if defined(date_to) %}
            AND date <= {{ Date(date_to, description="Finishing day for filtering a date range", required=False) }}
        {% else %} AND date <= today()
        {% end %}
    GROUP BY date, plan_version_id, plan_slug, plan_version

NODE plan_signups
DESCRIPTION >
    Extract signups from sign_up events

SQL >
    %
    SELECT
        toDate(timestamp) AS date,
        coalesce(session_id, '0') as session_id,
        JSONExtractString(payload, 'plan_version_id') as plan_version_id,
        JSONExtractString(payload, 'customer_id') as customer_id,
        JSONExtractString(payload, 'page_id') as page_id,
        1 as signups
    FROM analytics_events
    WHERE action = 'sign_up'
        AND isValidJSON(payload)
        AND JSONExtractString(payload, 'plan_version_id') IS NOT NULL
        AND JSONExtractString(payload, 'plan_version_id') != ''
        {% if defined(plan_version_id) %} AND JSONExtractString(payload, 'plan_version_id') = {{ String(plan_version_id) }} {% end %}
        {% if defined(date_from) %}
            AND toDate(timestamp) >= {{ Date(date_from, description="Starting day for filtering a date range", required=False) }}
        {% else %} AND toDate(timestamp) >= timestampAdd(today(), interval -30 day)
        {% end %}
        {% if defined(date_to) %}
            AND toDate(timestamp) <= {{ Date(date_to, description="Finishing day for filtering a date range", required=False) }}
        {% else %} AND toDate(timestamp) <= today()
        {% end %}

NODE conversion_summary
DESCRIPTION >
    Aggregate all metrics by plan and date using UNION approach for better compatibility

SQL >
    %
    WITH
    all_plan_dates AS (
        SELECT DISTINCT date, plan_version_id
        FROM (
            SELECT date, plan_version_id FROM (
                SELECT toDate(timestamp) AS date, arrayJoin(splitByChar(',', JSONExtractString(payload, 'plan_ids'))) as plan_version_id
                FROM analytics_events
                WHERE action = 'page_hit' AND JSONHas(payload, 'plan_ids') AND JSONExtractString(payload, 'plan_ids') != ''
                  AND toDate(timestamp) >= {% if defined(date_from) %}{{ Date(date_from) }}{% else %}timestampAdd(today(), interval -30 day){% end %}
                  AND toDate(timestamp) <= {% if defined(date_to) %}{{ Date(date_to) }}{% else %}today(){% end %}
            )
            UNION DISTINCT
            SELECT date, plan_version_id FROM analytics_plans_mv
            WHERE date >= {% if defined(date_from) %}{{ Date(date_from) }}{% else %}timestampAdd(today(), interval -30 day){% end %}
              AND date <= {% if defined(date_to) %}{{ Date(date_to) }}{% else %}today(){% end %}
            UNION DISTINCT
            SELECT toDate(timestamp) AS date, JSONExtractString(payload, 'plan_version_id') as plan_version_id
            FROM analytics_events
            WHERE action = 'sign_up' AND isValidJSON(payload) AND JSONExtractString(payload, 'plan_version_id') != ''
              AND toDate(timestamp) >= {% if defined(date_from) %}{{ Date(date_from) }}{% else %}timestampAdd(today(), interval -30 day){% end %}
              AND toDate(timestamp) <= {% if defined(date_to) %}{{ Date(date_to) }}{% else %}today(){% end %}
        )
        WHERE plan_version_id IS NOT NULL AND plan_version_id != ''
        {% if defined(plan_version_id) %} AND plan_version_id = {{ String(plan_version_id) }} {% end %}
    ),
    views_agg AS (
        SELECT
            date,
            plan_version_id,
            sum(views) as total_views
        FROM plan_views
        GROUP BY date, plan_version_id
    ),
    clicks_agg AS (
        SELECT
            date,
            plan_version_id,
            any(plan_slug) as plan_slug,
            any(plan_version) as plan_version,
            sum(total_clicks) as total_clicks,
            sum(unique_clicks) as unique_clicks
        FROM plan_clicks
        GROUP BY date, plan_version_id
    ),
    signups_agg AS (
        SELECT
            date,
            plan_version_id,
            count() as total_signups,
            uniq(customer_id) as unique_signups
        FROM plan_signups
        GROUP BY date, plan_version_id
    )

    SELECT
        apd.date,
        apd.plan_version_id,
        c.plan_slug,
        c.plan_version,
        coalesce(v.total_views, 0) as views,
        coalesce(c.total_clicks, 0) as clicks,
        coalesce(s.total_signups, 0) as signups,
        coalesce(s.unique_signups, 0) as unique_signups,

        -- Conversion rates
        case
            when v.total_views > 0 then round((c.total_clicks * 100.0) / v.total_views, 2)
            else 0
        end as click_rate,

        case
            when c.total_clicks > 0 then round((s.total_signups * 100.0) / c.total_clicks, 2)
            else 0
        end as signup_rate,

        case
            when v.total_views > 0 then round((s.total_signups * 100.0) / v.total_views, 2)
            else 0
        end as overall_conversion_rate

    FROM all_plan_dates apd
    LEFT JOIN views_agg v ON apd.date = v.date AND apd.plan_version_id = v.plan_version_id
    LEFT JOIN clicks_agg c ON apd.date = c.date AND apd.plan_version_id = c.plan_version_id
    LEFT JOIN signups_agg s ON apd.date = s.date AND apd.plan_version_id = s.plan_version_id
    ORDER BY apd.date DESC, views DESC, clicks DESC, signups DESC

TYPE endpoint