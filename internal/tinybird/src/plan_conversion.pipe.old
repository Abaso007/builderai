DESCRIPTION >
    Plan conversion metrics including views, clicks, and signups.
    Tracks the complete conversion funnel for plan versions.
    Accepts optional filtering by date range, plan_version_id, and plan_slug.

TOKEN "web-apps" READ

NODE plan_views
DESCRIPTION >
    Extract plan views from page_hit events.
    Parse plan_ids array and create individual records for each plan shown.

SQL >
    %
    SELECT
        toDate(timestamp) AS date,
        plan_id as plan_version_id,
        page_id,
        session_id,
        1 as views
    FROM unprice_page_hits
    ARRAY JOIN plan_ids as plan_id
    WHERE plan_id IS NOT NULL AND plan_id != ''

NODE plan_clicks
DESCRIPTION >
    Extract plan clicks from existing materialized view

SQL >
    %
    SELECT
        date,
        plan_version_id,
        page_id,
        sumMerge(unique_clicks) AS unique_clicks,
        sumMerge(total_clicks) AS total_clicks
    FROM unprice_analytics_plans_mv
    WHERE date >= {% if defined(date_from) %}{{ Date(date_from) }}{% else %}timestampAdd(today(), interval -30 day){% end %}
      AND date <= {% if defined(date_to) %}{{ Date(date_to) }}{% else %}today(){% end %}
    GROUP BY date, plan_version_id, page_id

NODE plan_signups
DESCRIPTION >
    Extract signups from sign_up events

SQL >
    %
    SELECT
        date,
        plan_version_id,
        page_id,
        customer_id,
        uniqMerge(unique_signups) as unique_signups
    FROM unprice_analytics_signups_mv
    WHERE plan_version_id IS NOT NULL
      AND plan_version_id != ''
      AND date >= {% if defined(date_from) %}{{ Date(date_from) }}{% else %}timestampAdd(today(), interval -30 day){% end %}
      AND date <= {% if defined(date_to) %}{{ Date(date_to) }}{% else %}today(){% end %}
    GROUP BY date, plan_version_id, page_id, customer_id

NODE conversion_summary
DESCRIPTION >
    Aggregate all metrics by plan and date to create conversion funnel

SQL >
    %
    WITH
    -- Get all unique plan-date combinations from all sources
    all_plan_dates AS (
        SELECT DISTINCT date, plan_version_id
        FROM (
            -- From page views
            SELECT toDate(timestamp) AS date, plan_id as plan_version_id
            FROM unprice_page_hits
            ARRAY JOIN plan_ids as plan_id
            WHERE plan_id IS NOT NULL AND plan_id != ''
              AND toDate(timestamp) >= {% if defined(date_from) %}{{ Date(date_from) }}{% else %}timestampAdd(today(), interval -30 day){% end %}
              AND toDate(timestamp) <= {% if defined(date_to) %}{{ Date(date_to) }}{% else %}today(){% end %}
        )
        UNION DISTINCT
        -- From clicks
        SELECT date, plan_version_id
        FROM unprice_analytics_plans_mv
        WHERE date >= {% if defined(date_from) %}{{ Date(date_from) }}{% else %}timestampAdd(today(), interval -30 day){% end %}
          AND date <= {% if defined(date_to) %}{{ Date(date_to) }}{% else %}today(){% end %}
        UNION DISTINCT
        -- From signups
        SELECT date, plan_version_id
        FROM unprice_analytics_signups_mv
        WHERE plan_version_id IS NOT NULL AND plan_version_id != ''
          AND date >= {% if defined(date_from) %}{{ Date(date_from) }}{% else %}timestampAdd(today(), interval -30 day){% end %}
          AND date <= {% if defined(date_to) %}{{ Date(date_to) }}{% else %}today(){% end %}
    ),
    -- Aggregate views by plan and date
    views_agg AS (
        SELECT
            date,
            plan_version_id,
            sum(views) as total_views
        FROM plan_views
        GROUP BY date, plan_version_id
    ),
    -- Aggregate clicks by plan and date
    clicks_agg AS (
        SELECT
            date,
            plan_version_id,
            total_clicks,
            unique_clicks
        FROM plan_clicks
        GROUP BY date, plan_version_id, total_clicks, unique_clicks
    ),
    -- Aggregate signups by plan and date
    signups_agg AS (
        SELECT
            date,
            plan_version_id,
            count() as total_signups,
            unique_signups
        FROM plan_signups
        GROUP BY date, plan_version_id, unique_signups
    )

    -- Final conversion funnel
    SELECT
        apd.date,
        apd.plan_version_id,
        coalesce(v.total_views, 0) as views,
        coalesce(c.total_clicks, 0) as clicks,
        coalesce(s.total_signups, 0) as signups,
        coalesce(s.unique_signups, 0) as unique_signups,

        -- Conversion rates
        case
            when v.total_views > 0 then round((c.total_clicks * 100.0) / v.total_views, 2)
            else 0
        end as click_rate,

        case
            when c.total_clicks > 0 then round((s.total_signups * 100.0) / c.total_clicks, 2)
            else 0
        end as signup_rate,

        case
            when v.total_views > 0 then round((s.total_signups * 100.0) / v.total_views, 2)
            else 0
        end as overall_conversion_rate

    FROM all_plan_dates apd
    LEFT JOIN views_agg v ON apd.date = v.date AND apd.plan_version_id = v.plan_version_id
    LEFT JOIN clicks_agg c ON apd.date = c.date AND apd.plan_version_id = c.plan_version_id
    LEFT JOIN signups_agg s ON apd.date = s.date AND apd.plan_version_id = s.plan_version_id
    ORDER BY apd.date DESC, views DESC, clicks DESC, signups DESC

TYPE endpoint