/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/customer/{customerId}/reportUsage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Report usage for a customer */
        post: operations["customer.reportUsage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer/{customerId}/revalidateEntitlement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Pull new entitlement configuration from Unprice */
        post: operations["customer.revalidateEntitlement"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer/{customerId}/reset-entitlements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Reset entitlements for a customer */
        post: operations["customer.resetEntitlements"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer/{customerId}/can/{featureSlug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Check if a customer can use a feature */
        get: operations["customer.can"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ErrBadRequest: {
            error: {
                /**
                 * @description A machine readable error code.
                 * @example BAD_REQUEST
                 * @enum {string}
                 */
                code: "BAD_REQUEST";
                /**
                 * @description A link to our documentation with more details about this error code
                 * @example https://unprice.dev/docs/api-reference/errors/code/BAD_REQUEST
                 */
                docs: string;
                /** @description A human readable explanation of what went wrong */
                message: string;
                /**
                 * @description Please always include the requestId in your error report
                 * @example req_1234
                 */
                requestId: string;
            };
        };
        ErrUnauthorized: {
            error: {
                /**
                 * @description A machine readable error code.
                 * @example UNAUTHORIZED
                 * @enum {string}
                 */
                code: "UNAUTHORIZED";
                /**
                 * @description A link to our documentation with more details about this error code
                 * @example https://unprice.dev/docs/api-reference/errors/code/UNAUTHORIZED
                 */
                docs: string;
                /** @description A human readable explanation of what went wrong */
                message: string;
                /**
                 * @description Please always include the requestId in your error report
                 * @example req_1234
                 */
                requestId: string;
            };
        };
        ErrForbidden: {
            error: {
                /**
                 * @description A machine readable error code.
                 * @example FORBIDDEN
                 * @enum {string}
                 */
                code: "FORBIDDEN";
                /**
                 * @description A link to our documentation with more details about this error code
                 * @example https://unprice.dev/docs/api-reference/errors/code/FORBIDDEN
                 */
                docs: string;
                /** @description A human readable explanation of what went wrong */
                message: string;
                /**
                 * @description Please always include the requestId in your error report
                 * @example req_1234
                 */
                requestId: string;
            };
        };
        ErrNotFound: {
            error: {
                /**
                 * @description A machine readable error code.
                 * @example NOT_FOUND
                 * @enum {string}
                 */
                code: "NOT_FOUND";
                /**
                 * @description A link to our documentation with more details about this error code
                 * @example https://unprice.dev/docs/api-reference/errors/code/NOT_FOUND
                 */
                docs: string;
                /** @description A human readable explanation of what went wrong */
                message: string;
                /**
                 * @description Please always include the requestId in your error report
                 * @example req_1234
                 */
                requestId: string;
            };
        };
        ErrConflict: {
            error: {
                /**
                 * @description A machine readable error code.
                 * @example CONFLICT
                 * @enum {string}
                 */
                code: "CONFLICT";
                /**
                 * @description A link to our documentation with more details about this error code
                 * @example https://unprice.dev/docs/api-reference/errors/code/CONFLICT
                 */
                docs: string;
                /** @description A human readable explanation of what went wrong */
                message: string;
                /**
                 * @description Please always include the requestId in your error report
                 * @example req_1234
                 */
                requestId: string;
            };
        };
        ErrPreconditionFailed: {
            error: {
                /**
                 * @description A machine readable error code.
                 * @example PRECONDITION_FAILED
                 * @enum {string}
                 */
                code: "PRECONDITION_FAILED";
                /**
                 * @description A link to our documentation with more details about this error code
                 * @example https://unprice.dev/docs/api-reference/errors/code/PRECONDITION_FAILED
                 */
                docs: string;
                /** @description A human readable explanation of what went wrong */
                message: string;
                /**
                 * @description Please always include the requestId in your error report
                 * @example req_1234
                 */
                requestId: string;
            };
        };
        ErrTooManyRequests: {
            error: {
                /**
                 * @description A machine readable error code.
                 * @example TOO_MANY_REQUESTS
                 * @enum {string}
                 */
                code: "TOO_MANY_REQUESTS";
                /**
                 * @description A link to our documentation with more details about this error code
                 * @example https://unprice.dev/docs/api-reference/errors/code/TOO_MANY_REQUESTS
                 */
                docs: string;
                /** @description A human readable explanation of what went wrong */
                message: string;
                /**
                 * @description Please always include the requestId in your error report
                 * @example req_1234
                 */
                requestId: string;
            };
        };
        ErrInternalServerError: {
            error: {
                /**
                 * @description A machine readable error code.
                 * @example INTERNAL_SERVER_ERROR
                 * @enum {string}
                 */
                code: "INTERNAL_SERVER_ERROR";
                /**
                 * @description A link to our documentation with more details about this error code
                 * @example https://unprice.dev/docs/api-reference/errors/code/INTERNAL_SERVER_ERROR
                 */
                docs: string;
                /** @description A human readable explanation of what went wrong */
                message: string;
                /**
                 * @description Please always include the requestId in your error report
                 * @example req_1234
                 */
                requestId: string;
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "customer.reportUsage": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example cus_1H7KQFLr7RepUyQBKdnvY */
                customerId: string;
            };
            cookie?: never;
        };
        /** @description The usage to report */
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The feature slug
                     * @example tokens
                     */
                    featureSlug: string;
                    /**
                     * @description The usage
                     * @example 30
                     */
                    usage: number;
                    /**
                     * Format: uuid
                     * @description The idempotence key
                     * @example 123e4567-e89b-12d3-a456-426614174000
                     */
                    idempotenceKey: string;
                };
            };
        };
        responses: {
            /** @description The result of the report usage */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success: boolean;
                        message?: string;
                        cacheHit?: boolean;
                        remaining?: number;
                    };
                };
            };
            /** @description The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing). */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrBadRequest"];
                };
            };
            /** @description Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrUnauthorized"];
                };
            };
            /** @description The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrForbidden"];
                };
            };
            /** @description The server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrNotFound"];
                };
            };
            /** @description This response is sent when a request conflicts with the current state of the server. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrConflict"];
                };
            };
            /** @description The requested operation cannot be completed because certain conditions were not met. This typically occurs when a required resource state or version check fails. */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrPreconditionFailed"];
                };
            };
            /** @description The user has sent too many requests in a given amount of time ("rate limiting") */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrTooManyRequests"];
                };
            };
            /** @description The server has encountered a situation it does not know how to handle. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrInternalServerError"];
                };
            };
        };
    };
    "customer.revalidateEntitlement": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example cus_1H7KQFLr7RepUyQBKdnvY */
                customerId: string;
            };
            cookie?: never;
        };
        /** @description The feature slug to revalidate */
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The feature slug to revalidate
                     * @example tokens
                     */
                    featureSlug: string;
                };
            };
        };
        responses: {
            /** @description The result of the delete customer */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success: boolean;
                        message?: string;
                    };
                };
            };
            /** @description The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing). */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrBadRequest"];
                };
            };
            /** @description Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrUnauthorized"];
                };
            };
            /** @description The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrForbidden"];
                };
            };
            /** @description The server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrNotFound"];
                };
            };
            /** @description This response is sent when a request conflicts with the current state of the server. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrConflict"];
                };
            };
            /** @description The requested operation cannot be completed because certain conditions were not met. This typically occurs when a required resource state or version check fails. */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrPreconditionFailed"];
                };
            };
            /** @description The user has sent too many requests in a given amount of time ("rate limiting") */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrTooManyRequests"];
                };
            };
            /** @description The server has encountered a situation it does not know how to handle. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrInternalServerError"];
                };
            };
        };
    };
    "customer.resetEntitlements": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example cus_1H7KQFLr7RepUyQBKdnvY */
                customerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The result of the reset entitlements */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success: boolean;
                        message?: string;
                    };
                };
            };
            /** @description The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing). */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrBadRequest"];
                };
            };
            /** @description Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrUnauthorized"];
                };
            };
            /** @description The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrForbidden"];
                };
            };
            /** @description The server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrNotFound"];
                };
            };
            /** @description This response is sent when a request conflicts with the current state of the server. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrConflict"];
                };
            };
            /** @description The requested operation cannot be completed because certain conditions were not met. This typically occurs when a required resource state or version check fails. */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrPreconditionFailed"];
                };
            };
            /** @description The user has sent too many requests in a given amount of time ("rate limiting") */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrTooManyRequests"];
                };
            };
            /** @description The server has encountered a situation it does not know how to handle. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrInternalServerError"];
                };
            };
        };
    };
    "customer.can": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example cus_1H7KQFLr7RepUyQBKdnvY */
                customerId: string;
                /** @example tokens */
                featureSlug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The result of the report usage */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success: boolean;
                        message?: string;
                        cacheHit?: boolean;
                        remaining?: number;
                    };
                };
            };
            /** @description The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing). */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrBadRequest"];
                };
            };
            /** @description Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrUnauthorized"];
                };
            };
            /** @description The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrForbidden"];
                };
            };
            /** @description The server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 Forbidden to hide the existence of a resource from an unauthorized client. This response code is probably the most well known due to its frequent occurrence on the web. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrNotFound"];
                };
            };
            /** @description This response is sent when a request conflicts with the current state of the server. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrConflict"];
                };
            };
            /** @description The requested operation cannot be completed because certain conditions were not met. This typically occurs when a required resource state or version check fails. */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrPreconditionFailed"];
                };
            };
            /** @description The user has sent too many requests in a given amount of time ("rate limiting") */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrTooManyRequests"];
                };
            };
            /** @description The server has encountered a situation it does not know how to handle. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrInternalServerError"];
                };
            };
        };
    };
}
