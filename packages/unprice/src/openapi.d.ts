/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/edge/customers.can": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["customers-can"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/edge/customers.reportUsage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["customers-reportUsage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: {
        /** @description Error response */
        error: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    message: string;
                    code: string;
                    issues?: {
                        message: string;
                    }[];
                };
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "customers-can": {
        parameters: {
            query: {
                customerId: string;
                featureSlug: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        userHasFeature: boolean;
                        /** @enum {string} */
                        deniedReason?: "SUBSCRIPTION_EXPIRED" | "SUBSCRIPTION_NOT_ACTIVE" | "FEATURE_NOT_FOUND_IN_SUBSCRIPTION" | "CUSTOMER_HAS_NO_SUBSCRIPTION" | "CUSTOMER_NOT_FOUND" | "RATE_LIMITED" | "USAGE_EXCEEDED" | "FEATURE_TYPE_NOT_SUPPORTED";
                        currentUsage?: number;
                        limit?: number;
                    };
                };
            };
            default: components["responses"]["error"];
        };
    };
    "customers-reportUsage": {
        parameters: {
            query: {
                customerId: string;
                featureSlug: string;
                usage: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success: boolean;
                        error?: ("SUBSCRIPTION_EXPIRED" | "SUBSCRIPTION_NOT_ACTIVE" | "FEATURE_NOT_FOUND_IN_SUBSCRIPTION" | "CUSTOMER_HAS_NO_SUBSCRIPTION" | "CUSTOMER_NOT_FOUND" | "RATE_LIMITED" | "USAGE_EXCEEDED" | "FEATURE_TYPE_NOT_SUPPORTED") | "FEATURE_IS_NOT_USAGE_TYPE";
                    };
                };
            };
            default: components["responses"]["error"];
        };
    };
}
