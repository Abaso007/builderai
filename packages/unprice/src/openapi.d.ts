/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/edge/customers.create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["customers-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/edge/customers.remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["customers-remove"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/edge/customers.update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["customers-update"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/edge/customers.exist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["customers-exist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/edge/customers.getByEmail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["customers-getByEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/edge/customers.getById": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["customers-getById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/edge/customers.can": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["customers-can"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/edge/customers.reportUsage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["customers-reportUsage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: {
        /** @description Error response */
        error: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    message: string;
                    code: string;
                    issues?: {
                        message: string;
                    }[];
                };
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "customers-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    id?: string;
                    projectId?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: email */
                    email: string;
                    name: string;
                    description?: string | null;
                    metadata?: {
                        metadataPaymentProviderSchema: {
                            stripe: {
                                customerId?: string;
                                defaultPaymentMethodId?: string;
                            };
                            lemonsqueezy: {
                                customerId?: string;
                                defaultPaymentMethodId?: string;
                            };
                        };
                        externalId?: string;
                    } | null;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        customer: {
                            id: string;
                            projectId: string;
                            /** Format: date-time */
                            createdAt: string;
                            /** Format: date-time */
                            updatedAt: string;
                            email: string;
                            name: string;
                            description: string | null;
                            metadata: {
                                metadataPaymentProviderSchema: {
                                    stripe: {
                                        customerId?: string;
                                        defaultPaymentMethodId?: string;
                                    };
                                    lemonsqueezy: {
                                        customerId?: string;
                                        defaultPaymentMethodId?: string;
                                    };
                                };
                                externalId?: string;
                            } | null;
                        };
                    };
                };
            };
            default: components["responses"]["error"];
        };
    };
    "customers-remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    id: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        customer: {
                            id: string;
                            projectId: string;
                            /** Format: date-time */
                            createdAt: string;
                            /** Format: date-time */
                            updatedAt: string;
                            email: string;
                            name: string;
                            description: string | null;
                            metadata: {
                                metadataPaymentProviderSchema: {
                                    stripe: {
                                        customerId?: string;
                                        defaultPaymentMethodId?: string;
                                    };
                                    lemonsqueezy: {
                                        customerId?: string;
                                        defaultPaymentMethodId?: string;
                                    };
                                };
                                externalId?: string;
                            } | null;
                        };
                    };
                };
            };
            default: components["responses"]["error"];
        };
    };
    "customers-update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    id: string;
                    name: string;
                    description?: string | null;
                    email: string;
                    metadata?: {
                        metadataPaymentProviderSchema: {
                            stripe: {
                                customerId?: string;
                                defaultPaymentMethodId?: string;
                            };
                            lemonsqueezy: {
                                customerId?: string;
                                defaultPaymentMethodId?: string;
                            };
                        };
                        externalId?: string;
                    } | null;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        customer: {
                            id: string;
                            projectId: string;
                            /** Format: date-time */
                            createdAt: string;
                            /** Format: date-time */
                            updatedAt: string;
                            email: string;
                            name: string;
                            description: string | null;
                            metadata: {
                                metadataPaymentProviderSchema: {
                                    stripe: {
                                        customerId?: string;
                                        defaultPaymentMethodId?: string;
                                    };
                                    lemonsqueezy: {
                                        customerId?: string;
                                        defaultPaymentMethodId?: string;
                                    };
                                };
                                externalId?: string;
                            } | null;
                        };
                    };
                };
            };
            default: components["responses"]["error"];
        };
    };
    "customers-exist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    email: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        exist: boolean;
                    };
                };
            };
            default: components["responses"]["error"];
        };
    };
    "customers-getByEmail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    email: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        customer: {
                            id: string;
                            projectId: string;
                            /** Format: date-time */
                            createdAt: string;
                            /** Format: date-time */
                            updatedAt: string;
                            email: string;
                            name: string;
                            description: string | null;
                            metadata: {
                                metadataPaymentProviderSchema: {
                                    stripe: {
                                        customerId?: string;
                                        defaultPaymentMethodId?: string;
                                    };
                                    lemonsqueezy: {
                                        customerId?: string;
                                        defaultPaymentMethodId?: string;
                                    };
                                };
                                externalId?: string;
                            } | null;
                        };
                    };
                };
            };
            default: components["responses"]["error"];
        };
    };
    "customers-getById": {
        parameters: {
            query: {
                id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        customer: {
                            id: string;
                            projectId: string;
                            /** Format: date-time */
                            createdAt: string;
                            /** Format: date-time */
                            updatedAt: string;
                            email: string;
                            name: string;
                            description: string | null;
                            metadata: {
                                metadataPaymentProviderSchema: {
                                    stripe: {
                                        customerId?: string;
                                        defaultPaymentMethodId?: string;
                                    };
                                    lemonsqueezy: {
                                        customerId?: string;
                                        defaultPaymentMethodId?: string;
                                    };
                                };
                                externalId?: string;
                            } | null;
                        };
                    };
                };
            };
            default: components["responses"]["error"];
        };
    };
    "customers-can": {
        parameters: {
            query: {
                customerId: string;
                featureSlug: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        access: boolean;
                        /** @enum {string} */
                        deniedReason?: "RATE_LIMITED" | "USAGE_EXCEEDED" | "FEATURE_NOT_FOUND_IN_SUBSCRIPTION";
                        currentUsage?: number;
                        limit?: number;
                    };
                };
            };
            default: components["responses"]["error"];
        };
    };
    "customers-reportUsage": {
        parameters: {
            query: {
                customerId: string;
                featureSlug: string;
                usage: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success: boolean;
                    };
                };
            };
            default: components["responses"]["error"];
        };
    };
}
